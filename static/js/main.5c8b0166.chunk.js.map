{"version":3,"sources":["Form/index.js","Tasks/index.js","Section/index.js","Buttons/index.js","Header/index.js","Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","textFocus","useRef","className","onSubmit","event","preventDefault","trim","value","ref","type","placeholder","onChange","target","onClick","current","focus","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","id","content","Section","title","body","extraHeaderContent","Buttons","toggleHideDone","finishAllTasks","length","disabled","every","Header","Main","children","App","setHideDone","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c8b0166.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const textFocus = useRef();\r\n\r\n  const setTextFocus = () => {\r\n    textFocus.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() === \"\") return;\r\n    addNewTask(newTaskContent);\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        ref={textFocus}\r\n        className=\"form__text\" type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <button\r\n        className=\"form__button\"\r\n        onClick={setTextFocus}\r\n      >\r\n        Dodaj zadanie\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <ul className=\"taskList\">\r\n    {tasks.map(task => (\r\n      <li\r\n        key={task.id}\r\n        className={`taskList__item \r\n        ${task.done && hideDone\r\n            ? \"taskList__item--hide\"\r\n            : \"\"}`\r\n        }\r\n      >\r\n        <button\r\n          onClick={() => toggleTaskDone(task.id)}\r\n          className=\"taskList__button \">\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <span className={`taskList__span \r\n          ${task.done\r\n            ? \"taskList__span--done\"\r\n            : \"\"}`\r\n        }\r\n        >\r\n          {task.content}\r\n        </span>\r\n        <button\r\n          onClick={() => removeTask(task.id)}\r\n          className=\"\r\n          taskList__button\r\n          taskList__button--remove\r\n          \"\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))};\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <section className=\"section\">\r\n    <header className=\"section__header\">\r\n      <h2 className=\"section__title\">\r\n        {title}\r\n      </h2>\r\n      {extraHeaderContent}\r\n    </header>\r\n    <div className=\"section__body\">\r\n      {body}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Section;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, finishAllTasks }) => (\r\n  <div className=\"buttons\">\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <button\r\n          onClick={toggleHideDone}\r\n          className=\"buttons__button \"\r\n        >\r\n          {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n      </button>\r\n        <button\r\n          onClick={finishAllTasks}\r\n          className=\"buttons__button\"\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          UkoÅ„cz wszystkie\r\n      </button>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1 className=\"header\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Main = ({ children }) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Section from \"./Section\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id)\n        return {\n          ...task,\n          done: !task.done\n        }\n      return task;\n    }));\n  };\n\n  const finishAllTasks = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      }\n    ]);\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Lista zadaÅ„\"\n      />\n      <Main>\n        <Section\n          title={\"Dodaj nowe zadanie\"}\n          body={\n            <Form\n              addNewTask={addNewTask}\n            />}\n        />\n        <Section\n          title={\"Lista zadaÅ„\"}\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              finishAllTasks={finishAllTasks}\n            />}\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}