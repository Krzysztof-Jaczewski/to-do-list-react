{"version":3,"sources":["theme.ts","GlobalStyle.ts","reportWebVitals.js","features/tasks/tasksLocalStorage.tsx","features/tasks/tasksSlice.ts","features/tasks/getExampleTasks.ts","features/tasks/tasksSaga.ts","store.ts","common/Header/styled.ts","common/Header/index.tsx","common/Main/styled.ts","common/Main/index.tsx","common/Section/styled.ts","common/Section/index.tsx","features/author/reactImage.jpg","features/author/styled.ts","features/author/AuthorPage.tsx","common/Input/index.ts","features/tasks/TasksPage/Form/styled.ts","features/tasks/TasksPage/Form/index.tsx","common/Button/index.ts","features/tasks/TasksPage/Buttons/index.tsx","features/tasks/TasksPage/TaskRename/styled.ts","features/tasks/TasksPage/TasksListButtons/index.tsx","features/tasks/TasksPage/TaskRename/Index.tsx","features/tasks/TasksPage/TasksList/styled.ts","features/tasks/queryParameters.ts","features/tasks/searchQueryParameter.ts","routes.ts","features/tasks/TasksPage/TasksList/index.tsx","features/tasks/TasksPage/Search/styled.ts","features/tasks/TasksPage/Search/index.tsx","common/Loading/styled.ts","common/Loading/index.tsx","features/tasks/TasksPage/ExampleButton/index.tsx","features/tasks/TasksPage/index.tsx","features/tasks/TaskPage/index.tsx","Navigation/styled.tsx","Navigation/index.tsx","App.tsx","index.tsx"],"names":["theme","colors","mainColor","backgroundColor","renameButton","cancelButton","completeTaskButton","size","mobile","filter","hover","active","GlobalStyle","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","storedTasks","getItem","parse","error","getTasksFromLocalStorage","hideDone","isLoading","isCurrentlyRename","reducers","addTask","payload","push","toggleTaskDone","selectedTaskId","index","findIndex","id","isDone","setAllTasksDone","forEach","task","removeTask","splice","renameTask","cancelRenameTask","acceptRenameTask","renamedTask","toggleHideDone","state","fetchExampleTasks","fetchExampleTasksSuccess","exampleTasks","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectIsEveryTaskDone","every","selectAreTasksEmpty","length","getExampleTasks","a","axios","get","response","data","fetchExampleTasksSaga","saveTasksInLocalStorageSaga","tasksSaga","delay","call","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","StyledHeader","styled","h1","Header","title","rest","StyledMain","main","Main","children","StyledSection","section","header","Title","h2","SectionBody","div","Section","body","extraHeaderContent","Image","img","AuthorPage","src","reactImage","alt","Input","input","StyledForm","form","Button","button","Form","useState","newTaskContent","setNewTaskContent","textFocus","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","value","ref","placeholder","onChange","target","AdditionalButtons","Buttons","useSelector","areTasksEmpty","isEveryTaskDone","onClick","disabled","TextRenameForm","isHide","css","ListButton","remove","TaskRename","inputFocus","useEffect","onFocus","List","ul","Item","span","StyledLink","Link","$isDone","useQueryParameter","key","location","useLocation","URLSearchParams","search","searchQueryParameter","toTask","TasksList","query","toUpperCase","includes","selectTasksByQuery","map","to","Wrapper","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","Loader","p","Loading","ExampleButton","loading","TasksPage","TaskPage","useParams","taskId","find","getTaskById","StyledNavLink","NavLink","li","Navigation","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef740493.chunk.js","sourcesContent":["export const theme = {\r\n    colors: {\r\n        mainColor: 'teal',\r\n        backgroundColor: '#eee',\r\n        renameButton: 'hsl(200, 95%, 40%)',\r\n        cancelButton: 'hsl(357, 95%, 40%)',\r\n        completeTaskButton: 'hsl(120, 100%, 25%)',\r\n    },\r\n    size: {\r\n        mobile: '767px',\r\n    },\r\n    filter: {\r\n        hover: 'brightness(110%)',\r\n        active: 'brightness(125%)',\r\n    },\r\n};\r\n","import { theme } from 'src/theme';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background-color: ${theme.colors.backgroundColor};\r\n}\r\n\r\n`;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { TaskType } from 'src/ts/types';\r\n\r\nconst localStorageKey = 'tasks';\r\n\r\nexport const saveTasksInLocalStorage = (tasks: TaskType[]) =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = (): TaskType[] => {\r\n    try {\r\n        const storedTasks = localStorage.getItem(localStorageKey);\r\n        return storedTasks ? JSON.parse(storedTasks) : [];\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\nimport { RootState } from 'src/store';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        isLoading: false,\r\n        isCurrentlyRename: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: selectedTaskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n            tasks[index].isDone = !tasks[index].isDone;\r\n        },\r\n        setAllTasksDone: ({ tasks }) => {\r\n            tasks.forEach((task) => {\r\n                task.isDone = true;\r\n            });\r\n        },\r\n        removeTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        renameTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n            tasks.forEach((task) => {\r\n                task.isCurrentlyRename = false;\r\n            });\r\n            tasks[index].isCurrentlyRename = true;\r\n            tasks[index].isDone = false;\r\n        },\r\n        cancelRenameTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n            tasks[index].isCurrentlyRename = false;\r\n        },\r\n        acceptRenameTask: ({ tasks }, { payload: renamedTask }) => {\r\n            const index = tasks.findIndex(({ id }) => id === renamedTask.id);\r\n            tasks.splice(index, 1, renamedTask);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: exampleTasks }) => {\r\n            state.tasks = exampleTasks;\r\n            state.isLoading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.isLoading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllTasksDone,\r\n    removeTask,\r\n    renameTask,\r\n    cancelRenameTask,\r\n    acceptRenameTask,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\nexport const selectTasksState = (state: RootState) => state.tasks;\r\n\r\nexport const selectTasks = (state: RootState) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state: RootState) =>\r\n    selectTasksState(state).hideDone;\r\nexport const selectLoading = (state: RootState) =>\r\n    selectTasksState(state).isLoading;\r\nexport const selectIsEveryTaskDone = (state: RootState) =>\r\n    selectTasks(state).every(({ isDone }) => isDone);\r\nexport const selectAreTasksEmpty = (state: RootState) =>\r\n    selectTasks(state).length === 0;\r\n\r\nexport const getTaskById = (state: RootState, taskId: string) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state: RootState, query?: string | null) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim() === '') {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase())\r\n    );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import axios from 'axios';\r\nimport { TaskType } from 'src/ts/types';\r\n\r\nexport const getExampleTasks = async (): Promise<TaskType[]> => {\r\n    const response = await axios.get('/to-do-list-react/exampleTasks.json');\r\n    return await response.data;\r\n};\r\n","import {\r\n    call,\r\n    put,\r\n    delay,\r\n    select,\r\n    takeEvery,\r\n    takeLatest,\r\n} from '@redux-saga/core/effects';\r\nimport { getExampleTasks } from './getExampleTasks';\r\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\r\nimport {\r\n    fetchExampleTasks,\r\n    fetchExampleTasksError,\r\n    fetchExampleTasksSuccess,\r\n    selectTasks,\r\n} from './tasksSlice';\r\nimport { TaskType } from 'src/ts/types';\r\n\r\nfunction* fetchExampleTasksSaga(): Generator<any, void, TaskType[]> {\r\n    try {\r\n        yield delay(2000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, 'Something went wrong!');\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageSaga(): Generator<any, void, TaskType[]> {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksSaga);\r\n    yield takeEvery('*', saveTasksInLocalStorageSaga);\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n  margin: 20px auto;\r\n  max-width: 900px;\r\n  padding: 0 20px;\r\n`;\r\n","import { StyledHeader } from './styled';\r\ninterface Props {\r\n    title: string;\r\n}\r\n\r\nexport const Header = ({ title, ...rest }: Props) => (\r\n    <header>\r\n        <StyledHeader {...rest}>{title}</StyledHeader>\r\n    </header>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  grid-gap: 10px;\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n`;\r\n","import { ReactNode } from 'react';\r\nimport { StyledMain } from './styled';\r\n\r\ninterface Props {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const Main = ({ children, ...rest }: Props) => (\r\n    <StyledMain {...rest}>{children}</StyledMain>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  display: grid;\r\n  grid-template-rows: auto minmax(50px, 1fr);\r\n  grid-gap: 5px;\r\n  box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const StyledHeader = styled.header`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  padding: 20px;\r\n  background-color: white;\r\n\r\n  @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  background-color: white;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n  background-color: white;\r\n`;\r\n","import { ReactNode } from 'react';\r\nimport { StyledSection, StyledHeader, SectionBody, Title } from './styled';\r\n\r\ninterface Props {\r\n    title: String;\r\n    body: ReactNode;\r\n    extraHeaderContent?: ReactNode;\r\n}\r\n\r\nexport const Section = ({\r\n    title,\r\n    body,\r\n    extraHeaderContent,\r\n    ...rest\r\n}: Props) => (\r\n    <StyledSection {...rest}>\r\n        <StyledHeader>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </StyledHeader>\r\n        <SectionBody>{body}</SectionBody>\r\n    </StyledSection>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/reactImage.d22ebda8.jpg\";","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 350px;\r\n  height: 350px;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n`;\r\n","import { Header } from '../../common/Header';\r\nimport { Main } from '../../common/Main';\r\nimport { Section } from '../../common/Section';\r\nimport reactImage from './reactImage.jpg';\r\nimport { Image } from './styled';\r\n\r\nexport const AuthorPage = () => (\r\n    <>\r\n        <Header title='O autorze' />\r\n        <Main>\r\n            <Section\r\n                title='Krzysiek Jaczewski'\r\n                body={\r\n                    <>\r\n                        <p>\r\n                            Filmy i seriale Sci-Fi to moje ulubione zabijacze\r\n                            czasu🛸, teraz staram się uczyć Frontendy, gdyż to\r\n                            dla mnie takie trochę podróż w świat Sci-fi, w\r\n                            kosmos możliwości i nieznanego potenjału🚀, w\r\n                            nieznane którego odkrywanie sprawia trud, ale i\r\n                            niebywałą satysfakcję gdy uda się dokończyć\r\n                            projekt😎.\r\n                        </p>\r\n                        <br />\r\n                        <p>\r\n                            Uwielbiam też się śmiać, kabarety i stand-upy zawsze\r\n                            potrafią mnie rozbawić😉.Uważam że życie jest za\r\n                            krótkie, żeby się smucić😋, dlatego tworząć swoje\r\n                            aplikacje zawsze staram się włączyć jakiś zabawny\r\n                            akcent, więc 😁.\r\n                        </p>\r\n                        <br />\r\n                        <Image src={reactImage} alt='reactImage' />\r\n                    </>\r\n                }\r\n            />\r\n        </Main>\r\n    </>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  background-color: white;\r\n  border: 1px solid rgb(220, 220, 220);\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.mainColor};\r\n  color: rgb(230, 230, 230);\r\n  padding: 10px;\r\n  border: none;\r\n  transition: background 0.5s linear, transform 0.5s linear;\r\n  border-radius: 30px;\r\n  box-shadow: 2px 2px 3px rgba(30, 30, 30, 0.5),\r\n    -2px -2px 3px rgba(230, 230, 230, 0.7), inset 2px 2px 3px rgba(0, 0, 0, 0.5),\r\n    inset -2px -2px 3px rgba(230, 230, 230, 0.7);\r\n\r\n  &:hover {\r\n    filter: ${({ theme }) => theme.filter.hover};\r\n  }\r\n\r\n  &:active {\r\n    filter: ${({ theme }) => theme.filter.active};\r\n    outline: 2px solid black;\r\n  }\r\n`;\r\n","import { nanoid } from '@reduxjs/toolkit';\r\nimport { FormEvent, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Input } from '../../../../common/Input';\r\nimport { addTask } from '../../tasksSlice';\r\nimport { StyledForm, Button } from './styled';\r\n\r\nexport const Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState('');\r\n    const textFocus = useRef<HTMLInputElement>(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() === '') return;\r\n\r\n        dispatch(\r\n            addTask({\r\n                content: newTaskContent,\r\n                isDone: false,\r\n                isCurrentlyRename: false,\r\n                id: nanoid(),\r\n            })\r\n        );\r\n        setNewTaskContent('');\r\n\r\n        textFocus.current?.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={textFocus}\r\n                type='text'\r\n                placeholder='Co jest do zrobienia?'\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const AdditionalButtons = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: white;\r\n    color: ${({ theme }) => theme.colors.mainColor};\r\n    transition: color 0.5s linear;\r\n    margin: 0 0 0 10px;\r\n\r\n    &:disabled {\r\n        color: #ddd;\r\n        pointer-events: none;\r\n    }\r\n\r\n    &:hover {\r\n        filter: ${({ theme }) => theme.filter.hover};\r\n    }\r\n\r\n    &:active {\r\n        filter: ${({ theme }) => theme.filter.active};\r\n    }\r\n    @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n        margin: 15px 0 0 0;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n    toggleHideDone,\r\n    setAllTasksDone,\r\n    selectHideDone,\r\n    selectAreTasksEmpty,\r\n    selectIsEveryTaskDone,\r\n} from '../../tasksSlice';\r\nimport { AdditionalButtons, Button } from '../../../../common/Button';\r\n\r\nexport const Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <AdditionalButtons>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? 'Pokaż' : 'Ukryj'} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllTasksDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </AdditionalButtons>\r\n    );\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\ninterface TextRenameFormProps {\r\n    isHide?: boolean;\r\n}\r\n\r\nexport const TextRenameForm = styled.form<TextRenameFormProps>`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto auto;\r\n    align-items: center;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    border-bottom: 1px solid rgb(218, 218, 218);\r\n\r\n    ${({ isHide }) =>\r\n        isHide &&\r\n        css`\r\n            display: none;\r\n        `}\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\ninterface ListButtonProps {\r\n    remove?: boolean;\r\n    isCurrentlyRename?: boolean;\r\n}\r\n\r\nexport const ListButton = styled.button<ListButtonProps>`\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    background-color: ${({ theme }) => theme.colors.completeTaskButton};\r\n    cursor: pointer;\r\n    color: white;\r\n    border: none;\r\n    transition: background 0.5s linear;\r\n    border-radius: 10px;\r\n    box-shadow: 2px 2px 3px rgba(30, 30, 30, 0.5),\r\n        -2px -2px 3px rgba(230, 230, 230, 0.7),\r\n        inset 2px 2px 3px rgba(0, 0, 0, 0.5),\r\n        inset -2px -2px 3px rgba(230, 230, 230, 0.7);\r\n    &:hover {\r\n        filter: ${({ theme }) => theme.filter.hover};\r\n    }\r\n\r\n    &:active {\r\n        filter: ${({ theme }) => theme.filter.active};\r\n        outline: 2px solid black;\r\n    }\r\n\r\n    ${({ remove }) =>\r\n        remove &&\r\n        css`\r\n            background-color: ${({ theme }) => theme.colors.cancelButton};\r\n\r\n            &:hover {\r\n                filter: ${({ theme }) => theme.filter.hover};\r\n            }\r\n\r\n            &:active {\r\n                filter: ${({ theme }) => theme.filter.active};\r\n                outline: 2px solid black;\r\n            }\r\n        `}\r\n\r\n    ${({ isCurrentlyRename }) =>\r\n        isCurrentlyRename &&\r\n        css`\r\n            background-color: ${({ theme }) => theme.colors.renameButton};\r\n\r\n            &:hover {\r\n                filter: ${({ theme }) => theme.filter.hover};\r\n            }\r\n\r\n            &:active {\r\n                filter: ${({ theme }) => theme.filter.active};\r\n                outline: 2px solid black;\r\n            }\r\n        `}\r\n`;\r\n","import { FormEvent, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { cancelRenameTask, acceptRenameTask } from '../../tasksSlice';\r\nimport { TextRenameForm } from './styled';\r\nimport { Input } from '../../../../common/Input';\r\nimport { ListButton } from '../TasksListButtons';\r\nimport { TaskType } from 'src/ts/types';\r\n\r\ninterface Props {\r\n    task: TaskType;\r\n}\r\n\r\nexport const TaskRename = ({ task }: Props) => {\r\n    const [newTaskContent, setNewTaskContent] = useState('');\r\n    const dispatch = useDispatch();\r\n    const inputFocus = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        inputFocus.current?.focus();\r\n    }, [task.isCurrentlyRename]);\r\n\r\n    const onFormSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        setNewTaskContent('');\r\n    };\r\n\r\n    return (\r\n        <TextRenameForm\r\n            isHide={!task.isCurrentlyRename}\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputFocus}\r\n                onFocus={() => setNewTaskContent(task.content)}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <ListButton\r\n                type='submit'\r\n                title='Zatwierdź zmianę'\r\n                onClick={() => {\r\n                    if (newTaskContent === '')\r\n                        dispatch(cancelRenameTask(task.id));\r\n                    else\r\n                        dispatch(\r\n                            acceptRenameTask({\r\n                                content: newTaskContent,\r\n                                isDone: false,\r\n                                isCurrentlyRename: false,\r\n                                id: task.id,\r\n                            })\r\n                        );\r\n                }}\r\n            >\r\n                ✔\r\n            </ListButton>\r\n            <ListButton\r\n                remove\r\n                type='button'\r\n                title='Anuluj zmianę'\r\n                onClick={() => dispatch(cancelRenameTask(task.id))}\r\n            >\r\n                X\r\n            </ListButton>\r\n        </TextRenameForm>\r\n    );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { HideTaskProps } from 'src/ts/types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.span<HideTaskProps>`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr repeat(2, auto);\r\n    align-items: center;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    border-bottom: 1px solid rgb(218, 218, 218);\r\n\r\n    ${({ isHide }) =>\r\n        isHide &&\r\n        css`\r\n            display: none;\r\n        `}\r\n`;\r\n\r\ninterface LinkProps {\r\n    $isDone?: boolean;\r\n}\r\n\r\nexport const StyledLink = styled(Link)<LinkProps>`\r\n    padding: 6px;\r\n    text-decoration: none;\r\n    color: black;\r\n    width: 100%;\r\n    position: relative;\r\n    word-break: break-word;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n\r\n    ${({ $isDone }) =>\r\n        $isDone &&\r\n        css`\r\n            text-decoration: line-through;\r\n        `}\r\n\r\n    &:hover {\r\n        z-index: 1;\r\n        color: white;\r\n    }\r\n\r\n    &::before {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        transform: scaleX(0);\r\n        transform-origin: bottom right;\r\n        background-image: linear-gradient(\r\n            to right,\r\n            hsl(120, 100%, 25%),\r\n            hsl(200, 95%, 40%)\r\n        );\r\n        transition: transform 0.5s ease;\r\n        height: 100%;\r\n    }\r\n\r\n    &:hover::before {\r\n        transform: scaleX(1);\r\n        transform-origin: bottom left;\r\n        z-index: -1;\r\n    }\r\n`;\r\n","import { useHistory, useLocation } from 'react-router-dom';\r\n\r\nexport const useQueryParameter = (key: string) => {\r\n    const location = useLocation();\r\n    return new URLSearchParams(location.search).get(key);\r\n};\r\n\r\ninterface ReplaceQueryParametersProps {\r\n    key: string;\r\n    value?: string;\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    return ({ key, value }: ReplaceQueryParametersProps) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    };\r\n};\r\n","export const searchQueryParameter = 'szukaj';\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/author\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `${toTasks()}/${id}`;\r\n","import { TaskRename } from '../TaskRename/Index';\r\nimport { Item, List, StyledLink } from './styled';\r\nimport {\r\n    toggleTaskDone,\r\n    removeTask,\r\n    renameTask,\r\n    selectHideDone,\r\n    selectTasksByQuery,\r\n} from '../../tasksSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useQueryParameter } from '../../queryParameters';\r\nimport { searchQueryParameter } from '../../searchQueryParameter';\r\nimport { toTask } from '../../../../routes';\r\nimport { ListButton } from '../TasksListButtons';\r\nimport { TaskType } from 'src/ts/types';\r\nimport { RootState } from 'src/store';\r\n\r\nexport const TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParameter);\r\n    const tasks = useSelector((state: RootState) =>\r\n        selectTasksByQuery(state, query)\r\n    ) as TaskType[];\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map((task) => (\r\n                <li key={task.id}>\r\n                    <Item\r\n                        isHide={\r\n                            (task.isDone && hideDone) || task.isCurrentlyRename\r\n                        }\r\n                    >\r\n                        <ListButton\r\n                            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        >\r\n                            {task.isDone ? '✔' : ''}\r\n                        </ListButton>\r\n                        <StyledLink\r\n                            $isDone={task.isDone}\r\n                            to={toTask({ id: task.id })}\r\n                        >\r\n                            {task.content}\r\n                        </StyledLink>\r\n                        <ListButton\r\n                            isCurrentlyRename\r\n                            onClick={() => dispatch(renameTask(task.id))}\r\n                            title='edytuj zadanie'\r\n                        >\r\n                            🖊️\r\n                        </ListButton>\r\n                        <ListButton\r\n                            remove\r\n                            onClick={() => dispatch(removeTask(task.id))}\r\n                            title='usuń zadanie'\r\n                        >\r\n                            🗑\r\n                        </ListButton>\r\n                    </Item>\r\n                    <TaskRename task={task} />\r\n                </li>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n","import {\r\n    useQueryParameter,\r\n    useReplaceQueryParameter,\r\n} from '../../queryParameters';\r\nimport { searchQueryParameter } from '../../searchQueryParameter';\r\nimport { Input } from '../../../../common/Input';\r\nimport { Wrapper } from './styled';\r\nimport { ChangeEvent } from 'react';\r\n\r\nexport const Search = () => {\r\n    const query = useQueryParameter(searchQueryParameter);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParameter,\r\n            value: target.value.trim() !== '' ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder='Filtruj zadania'\r\n                value={query || ''}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Loader = styled.p`\r\n  display: inline-block;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 1.4em;\r\n  font-weight: 700;\r\n  transform: scale(0.5);\r\n  color: ${({ theme }) => theme.colors.mainColor};\r\n\r\n  &:nth-child(1) {\r\n    animation: hover 1s linear infinite;\r\n  }\r\n\r\n  &:nth-child(2) {\r\n    animation: hover 1s linear infinite 0.125s;\r\n  }\r\n\r\n  &:nth-child(3) {\r\n    animation: hover 1s linear infinite 0.25s;\r\n  }\r\n\r\n  &:nth-child(4) {\r\n    animation: hover 1s linear infinite 0.375s;\r\n  }\r\n\r\n  &:nth-child(5) {\r\n    animation: hover 1s linear infinite 0.5s;\r\n  }\r\n\r\n  &:nth-child(6) {\r\n    animation: hover 1s linear infinite 0.675s;\r\n  }\r\n\r\n  &:nth-child(7) {\r\n    animation: hover 1s linear infinite 0.75s;\r\n  }\r\n\r\n  @keyframes hover {\r\n    0% {\r\n      transform: scale(0.5);\r\n      -webkit-text-stroke: 1px ${({ theme }) => theme.colors.mainColor};\r\n    }\r\n    20% {\r\n      transform: scale(1);\r\n      -webkit-text-stroke: 4px ${({ theme }) => theme.colors.mainColor};\r\n    }\r\n    50% {\r\n      transform: scale(0.5);\r\n    }\r\n  }\r\n`;\r\n","import { Loader } from './styled';\r\n\r\nexport const Loading = () => (\r\n    <>\r\n        <Loader>l</Loader>\r\n        <Loader>o</Loader>\r\n        <Loader>a</Loader>\r\n        <Loader>d</Loader>\r\n        <Loader>i</Loader>\r\n        <Loader>n</Loader>\r\n        <Loader>g</Loader>\r\n    </>\r\n);\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { AdditionalButtons, Button } from '../../../../common/Button';\r\nimport { fetchExampleTasks, selectLoading } from '../../tasksSlice';\r\nimport { Loading } from '../../../../common/Loading';\r\n\r\nexport const ExampleButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    return (\r\n        <AdditionalButtons>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                {loading ? <Loading /> : 'Pokaż przykładowe zadania'}\r\n            </Button>\r\n        </AdditionalButtons>\r\n    );\r\n};\r\n","import { Form } from \"./Form\";\nimport { Section } from \"../../../common/Section\";\nimport { Buttons } from \"./Buttons\";\nimport { Header } from \"../../../common/Header\";\nimport { Main } from \"../../../common/Main\";\nimport { TasksList } from \"./TasksList\";\nimport { Search } from \"./Search\";\nimport { ExampleButton } from \"./ExampleButton\";\n\nexport const TasksPage = () => {\n  return (\n    <>\n      <Header title=\"Lista zadań\" />\n      <Main>\n        <Section\n          title={\"Dodaj nowe zadanie\"}\n          extraHeaderContent={<ExampleButton />}\n          body={<Form />}\n        />\n        <Section title={\"Wyszukiwarka\"} body={<Search />} />\n        <Section\n          title={\"Lista zadań\"}\n          extraHeaderContent={<Buttons />}\n          body={<TasksList />}\n        />\n      </Main>\n    </>\n  );\n};\n","import { Header } from '../../../common/Header';\r\nimport { Main } from '../../../common/Main';\r\nimport { Section } from '../../../common/Section';\r\nimport { useParams } from 'react-router';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\nimport { RootState } from 'src/store';\r\n\r\ntype taskParams = {\r\n    id: string;\r\n};\r\n\r\nexport const TaskPage = () => {\r\n    const { id } = useParams<taskParams>();\r\n    const task = useSelector((state: RootState) => getTaskById(state, id));\r\n\r\n    return (\r\n        <>\r\n            <Header title='Szczegóły zadania' />\r\n            <Main>\r\n                <Section\r\n                    title={task ? task.content : 'Nie znaleziono zadania😢'}\r\n                    body={\r\n                        task && (\r\n                            <>\r\n                                <strong>Ukończono: </strong>\r\n                                {task.isDone ? 'Tak' : 'Nie'}\r\n                            </>\r\n                        )\r\n                    }\r\n                />\r\n            </Main>\r\n        </>\r\n    );\r\n};\r\n","import { NavLink } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n    text-decoration: none;\r\n    padding: 8px 16px;\r\n    color: hsl(0deg 0% 80%);\r\n    border: 2px solid hsl(0deg 0% 80%);\r\n    border-radius: 50px 10px;\r\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.5),\r\n        -2px -2px 3px rgba(200, 200, 200, 0.7),\r\n        inset 2px 2px 3px rgba(0, 0, 0, 0.5),\r\n        inset -2px -2px 3px rgba(200, 200, 200, 0.7);\r\n\r\n    cursor: pointer;\r\n    &.active {\r\n        color: white;\r\n        font-weight: bold;\r\n        border: 2px solid white;\r\n    }\r\n    &:hover {\r\n        box-shadow: 0 0 5px white, inset 0 0 5px white;\r\n    }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: center;\r\n    width: 100%;\r\n    grid-gap: 15px;\r\n    background-color: ${({ theme }) => theme.colors.mainColor};\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    list-style: none;\r\n    padding: 10px;\r\n`;\r\n","import { toAuthor, toTasks } from '../routes';\r\nimport { Item, List, StyledNavLink } from './styled';\r\n\r\nexport const Navigation = () => (\r\n    <nav>\r\n        <List>\r\n            <Item>\r\n                <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n            </Item>\r\n            <Item>\r\n                <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n            </Item>\r\n        </List>\r\n    </nav>\r\n);\r\n","import { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { AuthorPage } from './features/author/AuthorPage';\r\nimport { TasksPage } from './features/tasks/TasksPage';\r\nimport { TaskPage } from './features/tasks/TaskPage';\r\nimport { Navigation } from './Navigation';\r\nimport { toAuthor, toTask, toTasks } from './routes';\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n        <Switch>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path={toAuthor()}>\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route path='/'>\r\n                <Redirect to={toTasks()} />\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}