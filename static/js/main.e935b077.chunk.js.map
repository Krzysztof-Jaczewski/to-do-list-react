{"version":3,"sources":["components/Form/index.js","components/Tasks/Buttons/ToggleTaskDoneButton.js","components/Tasks/Buttons/RenameTaskButton.js","components/Tasks/Buttons/CancelRenameTaskButton.js","components/Tasks/Buttons/ConfirmTaskContentChangeButton.js","components/Tasks/Body/TaskContent.js","components/Tasks/Buttons/RemoveTaskButton.js","components/Tasks/Body/TaskDoneCondition.js","components/Tasks/Body/RenameTaskCondition.js","components/Tasks/index.js","components/Section/index.js","components/Buttons/index.js","components/Header/index.js","components/Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setTasks","useState","newTaskContent","setNewTaskContent","textFocus","useRef","className","onSubmit","event","content","preventDefault","trim","tasks","done","id","length","value","ref","type","placeholder","onChange","target","onClick","current","focus","ToggleTaskDoneButton","task","toggleTaskDone","RenameTaskButton","renameTask","title","CancelRenameTaskButton","cancelRenameTask","ConfirmTaskContentChangeButton","changeTaskContent","TaskContent","RemoveTaskButton","removeTask","TaskDoneCondition","hideDone","children","rename","RenameTaskCondition","Tasks","inputFocus","useEffect","map","filter","console","log","onFormSubmit","element","Section","body","extraHeaderContent","Buttons","setHideDone","disabled","every","Header","Main","App","localHideDone","localStorage","getItem","JSON","parse","localTasks","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e935b077.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport const Form = ({ setTasks }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const textFocus = useRef(null);\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const setTextFocus = () => {\r\n    textFocus.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() === \"\") return;\r\n    addNewTask(newTaskContent);\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        ref={textFocus}\r\n        className=\"form__text\" type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <button\r\n        className=\"form__button\"\r\n        onClick={setTextFocus}\r\n      >\r\n        Dodaj zadanie\r\n      </button>\r\n    </form>\r\n  );\r\n};","\r\nexport const ToggleTaskDoneButton = ({ task, toggleTaskDone }) => (\r\n    <button\r\n        className=\"taskList__button \"\r\n        onClick={() => toggleTaskDone(task.id)}\r\n    >\r\n        {task.done ? \"✔\" : \"\"}\r\n    </button>\r\n)","\r\nexport const RenameTaskButton = ({ task, renameTask }) => (\r\n    <button\r\n        onClick={() => renameTask(task.id)}\r\n        title=\"edytuj zadanie\"\r\n        className=\"\r\n              taskList__button\r\n              taskList__button--rename\r\n              \"\r\n    >\r\n        🖊️\r\n    </button>\r\n\r\n)","export const CancelRenameTaskButton = ({ task, cancelRenameTask }) => (\r\n  <button\r\n    className=\"taskList__button taskList__button--remove\"\r\n    type=\"button\"\r\n    title=\"Anuluj zmianę\"\r\n    onClick={() => cancelRenameTask(task.id)}\r\n  >\r\n    X\r\n  </button>\r\n\r\n)","export const ConfirmTaskContentChangeButton = ({ task, changeTaskContent }) => (\r\n  <button\r\n    type=\"submit\"\r\n    title=\"Zatwierdź zmianę\"\r\n    className=\"taskList__button\"\r\n    onClick={() => changeTaskContent(task.id)}\r\n  >\r\n    ✔\r\n  </button>\r\n)","export const TaskContent = ({ task }) => (\r\n  <span className={`taskList__span \r\n  ${task.done\r\n  ? \"taskList__span--done\"\r\n  : \"\"}`\r\n}\r\n>\r\n{task.content}\r\n</span>\r\n)","export const RemoveTaskButton = ({ task, removeTask }) => (\r\n  <button\r\n    onClick={() => removeTask(task.id)}\r\n    title=\"usuń zadanie\"\r\n    className=\"\r\n     taskList__button\r\n     taskList__button--remove\r\n     \"\r\n  >\r\n    🗑\r\n  </button>\r\n)","export const TaskDoneCondition = ({task,hideDone,children}) => (\r\n<span className={`\r\n             taskList__item \r\n             ${task.done && hideDone\r\n              ? \"taskList__item--hide\"\r\n              : \"\"}\r\n             ${task.rename\r\n              ? \"taskList__item--hide\"\r\n              : \"\"}`\r\n          }>\r\n{children}\r\n</span>\r\n)","export const RenameTaskCondition = ({ task,children }) => (\r\n    <span className={`\r\n    ${!task.rename\r\n            ? \"taskList__item--hide\"\r\n            : \"\"}`\r\n    }\r\n    >\r\n        {children}\r\n    </span>\r\n)","import { useEffect, useRef, useState } from \"react\";\r\nimport { ToggleTaskDoneButton } from \"./Buttons/ToggleTaskDoneButton\"\r\nimport { RenameTaskButton } from \"./Buttons/RenameTaskButton\"\r\nimport { CancelRenameTaskButton } from \"./Buttons/CancelRenameTaskButton\";\r\nimport { ConfirmTaskContentChangeButton } from \"./Buttons/ConfirmTaskContentChangeButton\";\r\nimport { TaskContent } from \"./Body/TaskContent\";\r\nimport { RemoveTaskButton } from \"./Buttons/RemoveTaskButton\";\r\nimport { TaskDoneCondition } from \"./Body/TaskDoneCondition\";\r\nimport { RenameTaskCondition } from \"./Body/RenameTaskCondition\";\r\nimport \"./style.css\";\r\n\r\n\r\nexport const Tasks = ({ tasks, hideDone, setTasks }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputFocus = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (inputFocus.current) {\r\n      inputFocus.current.focus();\r\n    }\r\n  });\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id)\r\n        return {\r\n          ...task,\r\n          done: !task.done\r\n        }\r\n      return task;\r\n    }));\r\n  };\r\n\r\n  const renameTask = (id) => {\r\n    setTasks(tasks => tasks.map(task => ({\r\n      ...task,\r\n      rename: false,\r\n    })));\r\n\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id)\r\n        return {\r\n          ...task,\r\n          rename: true,\r\n        }\r\n      return task;\r\n    }));\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const cancelRenameTask = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id)\r\n        return {\r\n          ...task,\r\n          rename: false,\r\n        }\r\n      return task;\r\n    }));\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  const changeTaskContent = (id) => {\r\n\r\n    setNewTaskContent(newTaskContent);\r\n\r\n    if (newTaskContent.trim() === \"\") return cancelRenameTask(id);\r\n\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id)\r\n        return {\r\n          ...task,\r\n          content: newTaskContent,\r\n          rename: false,\r\n        }\r\n      console.log(newTaskContent);\r\n      return task;\r\n    }));\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <ul className=\"taskList\">\r\n      {tasks.map(task => (\r\n        <li\r\n          key={task.id}\r\n        >\r\n          <TaskDoneCondition\r\n            task={task}\r\n            hideDone={hideDone}\r\n          >\r\n            <ToggleTaskDoneButton\r\n              toggleTaskDone={toggleTaskDone}\r\n              task={task}\r\n            />\r\n            <TaskContent\r\n              task={task}\r\n            />\r\n            <RenameTaskButton\r\n              task={task}\r\n              renameTask={renameTask}\r\n            />\r\n            <RemoveTaskButton\r\n              task={task}\r\n              removeTask={removeTask}\r\n            />\r\n          </TaskDoneCondition>\r\n          <RenameTaskCondition\r\n            task={task}\r\n          >\r\n            <form className=\"taskList__rename\" onSubmit={onFormSubmit}>\r\n              <input\r\n                value={newTaskContent}\r\n                ref={element => { inputFocus.current = element }}\r\n                className=\"taskList__input\" type=\"text\"\r\n                placeholder=\"\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n              />\r\n              <ConfirmTaskContentChangeButton\r\n                task={task}\r\n                changeTaskContent={changeTaskContent}\r\n              />\r\n              <CancelRenameTaskButton\r\n                task={task}\r\n                cancelRenameTask={cancelRenameTask}\r\n              />\r\n            </form>\r\n          </RenameTaskCondition>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import \"./style.css\";\r\n\r\nexport const Section = ({ title, body, extraHeaderContent }) => (\r\n  <section className=\"section\">\r\n    <header className=\"section__header\">\r\n      <h2 className=\"section__title\">\r\n        {title}\r\n      </h2>\r\n      {extraHeaderContent}\r\n    </header>\r\n    <div className=\"section__body\">\r\n      {body}\r\n    </div>\r\n  </section>\r\n);","import \"./style.css\";\r\n\r\nexport const Buttons = ({ tasks, hideDone, setTasks, setHideDone }) => {\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const finishAllTasks = () => {\r\n    setTasks(tasks => tasks.map(task => ({\r\n      ...task,\r\n      done: true,\r\n    })));\r\n  };\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <button\r\n            onClick={toggleHideDone}\r\n            className=\"buttons__button \"\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n      </button>\r\n          <button\r\n            onClick={finishAllTasks}\r\n            className=\"buttons__button\"\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n      </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};","import \"./style.css\";\r\n\r\nexport const Header = ({ title }) => (\r\n    <header>\r\n        <h1 className=\"header\">{title}</h1>\r\n    </header>\r\n);","import \"./style.css\";\r\n\r\nexport const Main = ({ children }) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);","import { useState, useEffect } from \"react\";\nimport { Form } from \"./components/Form\";\nimport { Tasks } from \"./components/Tasks\";\nimport { Section } from \"./components/Section\";\nimport { Buttons } from \"./components/Buttons\";\nimport { Header } from \"./components/Header\";\nimport { Main } from \"./components/Main\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(()=>{\n    const localHideDone = localStorage.getItem(\"hideDone\");\n    return localHideDone ? JSON.parse(localHideDone) : false\n  });\n\n  const [tasks, setTasks] = useState(() => {\n    const localTasks = localStorage.getItem(\"tasks\");\n    return localTasks ? JSON.parse(localTasks) : []\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  useEffect(() => {\n    localStorage.setItem(\"hideDone\", JSON.stringify(hideDone));\n  }, [hideDone]);\n\n\n  return (\n    <>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Main>\n        <Section\n          title={\"Dodaj nowe zadanie\"}\n          body={\n            <Form\n              setTasks={setTasks}\n            />}\n        />\n        <Section\n          title={\"Lista zadań\"}\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              setHideDone={setHideDone}\n              setTasks={setTasks}\n            />}\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              setTasks={setTasks}\n            />}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}