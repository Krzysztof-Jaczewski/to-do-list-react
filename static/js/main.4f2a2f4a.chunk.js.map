{"version":3,"sources":["GlobalStyle.js","reportWebVitals.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","common/Header/styled.js","common/Header/index.js","common/Main/styled.js","common/Main/index.js","common/Section/styled.js","common/Section/index.js","features/author/reactImage.jpg","features/author/styled.js","features/author/AuthorPage.js","common/Input/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","common/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/TaskRename/styled.js","features/tasks/TasksPage/TasksListButtons/index.js","features/tasks/TasksPage/TaskRename/Index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/queryParameters.js","features/tasks/searchQueryParameter.js","rutes.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","common/Loading/styled.js","common/Loading/index.js","features/tasks/TasksPage/ExampleButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","payload","push","toggleTaskDone","selectedTaskId","index","findIndex","id","done","setAllTasksDone","forEach","task","removeTask","splice","renameTask","currentlyRename","cancelRenameTask","acceptRenameTask","renamedTask","toggleHideDone","state","axiosExampleTasks","axiosExampleTasksSuccess","exampleTasks","axiosExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectIsEveryTaskDone","every","selectAreTasksEmpty","length","getExampleTasks","a","axios","get","response","data","axiosExampleTasksSaga","saveTasksInLocalStorageSaga","tasksSaga","delay","call","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","StyledHeader","styled","h1","Header","title","StyledMain","main","Main","children","StyledSection","section","header","size","mobile","Title","h2","SectionBody","div","Section","body","extraHeaderContent","Image","img","AuthorPage","src","reactimage","alt","Input","input","StyledForm","form","Button","button","mainColor","filter","hover","active","Form","useState","newTaskContent","setNewTaskContent","textFocus","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","value","ref","placeholder","onChange","target","AdditionalButtons","Buttons","useSelector","areTasksEmpty","isEveryTaskDone","onClick","disabled","TextRenameForm","hide","css","ListButton","completeTaskButton","remove","cancelButton","renameButton","TaskRename","inputFocus","useEffect","element","List","ul","Item","span","ListText","StyledLink","Link","useQueryParameter","key","location","useLocation","URLSearchParams","search","searchQueryParameter","toTask","TasksList","query","toUpperCase","includes","selectTasksByQuery","map","to","Wrapper","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","Loader","p","Loading","ExampleButton","TasksPage","TaskPage","useParams","taskId","find","getTasksById","StyledNavlink","NavLink","li","Navigation","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f2a2f4a.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background-color: ${({ theme }) => theme.colors.backgroundColor};\r\n}\r\n\r\n`;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: selectedTaskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    setAllTasksDone: ({ tasks }) => {\r\n      tasks.forEach((task) => {\r\n        task.done = true;\r\n      });\r\n    },\r\n    removeTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    renameTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n      tasks.forEach((task) => {\r\n        task.currentlyRename = false;\r\n      });\r\n      tasks[index].currentlyRename = true;\r\n      tasks[index].done = false;\r\n    },\r\n    cancelRenameTask: ({ tasks }, { payload: selectedTaskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === selectedTaskId);\r\n      tasks[index].currentlyRename = false;\r\n    },\r\n    acceptRenameTask: ({ tasks }, { payload: renamedTask }) => {\r\n      const index = tasks.findIndex(({ id }) => id === renamedTask.id);\r\n      tasks.splice(index, 1, renamedTask);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    axiosExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n    axiosExampleTasksSuccess: (state, { payload: exampleTasks }) => {\r\n      state.tasks = exampleTasks;\r\n      state.loading = false;\r\n    },\r\n    axiosExampleTasksError: (state) => {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  setAllTasksDone,\r\n  removeTask,\r\n  renameTask,\r\n  cancelRenameTask,\r\n  acceptRenameTask,\r\n  axiosExampleTasks,\r\n  axiosExampleTasksSuccess,\r\n  axiosExampleTasksError,\r\n} = tasksSlice.actions;\r\nexport const selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectLoading = (state) => selectTasksState(state).loading;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\n\r\nexport const getTasksById = (state, taskId) =>\r\n  selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import axios from \"axios\";\r\n\r\nexport const getExampleTasks = async () => {\r\n  const response = await axios.get(\"/toDoList-react/exampleTasks.json\");\r\n  return await response.data;\r\n};\r\n","import {\r\n  call,\r\n  put,\r\n  delay,\r\n  select,\r\n  takeEvery,\r\n  takeLatest,\r\n} from \"@redux-saga/core/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport {\r\n  axiosExampleTasks,\r\n  axiosExampleTasksError,\r\n  axiosExampleTasksSuccess,\r\n  selectTasks,\r\n} from \"./tasksSlice\";\r\n\r\nfunction* axiosExampleTasksSaga() {\r\n  try {\r\n    yield delay(2000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(axiosExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield put(axiosExampleTasksError());\r\n    yield call(alert, \"coś poszło nie tak!\");\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageSaga() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(axiosExampleTasks.type, axiosExampleTasksSaga);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageSaga);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n  margin: 20px auto;\r\n  max-width: 900px;\r\n  padding: 0 20px;\r\n`;\r\n","import { StyledHeader } from \"./styled\";\r\n\r\nexport const Header = ({ title }) => (\r\n  <header>\r\n    <StyledHeader>{title}</StyledHeader>\r\n  </header>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  grid-gap: 10px;\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n`;\r\n","import { StyledMain } from \"./styled\";\r\n\r\nexport const Main = ({ children }) => <StyledMain>{children}</StyledMain>;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  display: grid;\r\n  grid-template-rows: auto minmax(50px, 1fr);\r\n  grid-gap: 5px;\r\n  box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const StyledHeader = styled.header`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  padding: 20px;\r\n  grid-gap: 20px;\r\n  background-color: white;\r\n\r\n  @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  background-color: white;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n  background-color: white;\r\n`;","import { StyledSection, StyledHeader, SectionBody, Title } from \"./styled\";\r\n\r\nexport const Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <StyledHeader>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </StyledHeader>\r\n    <SectionBody>{body}</SectionBody>\r\n  </StyledSection>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/reactImage.d22ebda8.jpg\";","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 350px;\r\n  height: 350px;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n`;\r\n","import { Header } from \"../../common/Header\";\r\nimport { Main } from \"../../common/Main\";\r\nimport { Section } from \"../../common/Section\";\r\nimport reactimage from \"./reactImage.jpg\";\r\nimport { Image } from \"./styled\";\r\n\r\nexport const AuthorPage = () => (\r\n  <>\r\n    <Header title=\"O autorze\" />\r\n    <Main>\r\n      <Section\r\n        title=\"Krzysiek Jaczewski\"\r\n        body={\r\n          <>\r\n            <p>\r\n              Filmy i seriale Sci-Fi to moje ulubione zabijacze czasu🛸, teraz\r\n              staram się uczyć Frontendy, gdyż to dla mnie takie trochę podróż w\r\n              świat Sci-fi, w kosmos możliwości i nieznanego potenjału🚀, w\r\n              nieznane którego odkrywanie sprawia trud, ale i niebywałą\r\n              satysfakcję gdy uda się dokończyć projekt😎.\r\n            </p>\r\n            <br />\r\n            <p>\r\n              Uwielbiam też się śmiać, kabarety i stand-upy zawsze potrafią mnie\r\n              rozbawić😉.Uważam że życie jest za krótkie, żeby się smucić😋,\r\n              dlatego tworząć swoje aplikacje zawsze staram się włączyć jakiś\r\n              zabawny akcent, więc 😁.\r\n            </p>\r\n            <br />\r\n            <Image src={reactimage} alt=\"reactImage\" />\r\n          </>\r\n        }\r\n      />\r\n    </Main>\r\n  </>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  background-color: white;\r\n  border: 1px solid rgb(220, 220, 220);\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.mainColor};\r\n  color: rgb(230, 230, 230);\r\n  padding: 10px;\r\n  border: none;\r\n  transition: background 0.5s linear, transform 0.5s linear;\r\n\r\n  &:hover {\r\n    filter: ${({ theme }) => theme.filter.hover};\r\n  }\r\n\r\n  &:active {\r\n    filter: ${({ theme }) => theme.filter.active};\r\n    outline: 2px solid black;\r\n  }\r\n`;\r\n","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Input } from \"../../../../common/Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\n\r\nexport const Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const textFocus = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() === \"\") return;\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: newTaskContent,\r\n        done: false,\r\n        currentlyRename: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n    setNewTaskContent(\"\");\r\n    textFocus.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        ref={textFocus}\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const AdditionalButtons = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.size.mobile}) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: white;\r\n  color: ${({ theme }) => theme.colors.mainColor};\r\n  transition: color 0.5s linear;\r\n\r\n  &:disabled {\r\n    color: #ddd;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &:hover {\r\n    filter: ${({ theme }) => theme.filter.hover};\r\n  }\r\n\r\n  &:active {\r\n    filter: ${({ theme }) => theme.filter.active};\r\n  }\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { AdditionalButtons, Button } from \"../../../../common/Button\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllTasksDone,\r\n  selectHideDone,\r\n  selectAreTasksEmpty,\r\n  selectIsEveryTaskDone,\r\n} from \"../../tasksSlice\";\r\n\r\nexport const Buttons = () => {\r\n  const hideDone = useSelector(selectHideDone);\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <AdditionalButtons>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllTasksDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </AdditionalButtons>\r\n  );\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const TextRenameForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto auto;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid rgb(218, 218, 218);\r\n\r\n  ${({ hide }) =>\r\n    hide &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ListButton = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  padding: 0;\r\n  background-color: ${({ theme }) => theme.colors.completeTaskButton};\r\n  cursor: pointer;\r\n  color: white;\r\n  border: none;\r\n  transition: background 0.5s linear;\r\n\r\n  &:hover {\r\n    filter: ${({ theme }) => theme.filter.hover};\r\n  }\r\n\r\n  &:active {\r\n    filter: ${({ theme }) => theme.filter.active};\r\n    outline: 2px solid black;\r\n  }\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.colors.cancelButton};\r\n\r\n      &:hover {\r\n        filter: ${({ theme }) => theme.filter.hover};\r\n      }\r\n\r\n      &:active {\r\n        filter: ${({ theme }) => theme.filter.active};\r\n        outline: 2px solid black;\r\n      }\r\n    `}\r\n\r\n  ${({ currentlyRename }) =>\r\n    currentlyRename &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.colors.renameButton};\r\n\r\n      &:hover {\r\n        filter: ${({ theme }) => theme.filter.hover};\r\n      }\r\n\r\n      &:active {\r\n        filter: ${({ theme }) => theme.filter.active};\r\n        outline: 2px solid black;\r\n      }\r\n    `}\r\n`;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { cancelRenameTask, acceptRenameTask } from \"../../tasksSlice\";\r\nimport { TextRenameForm } from \"./styled\";\r\nimport { Input } from \"../../../../common/Input\";\r\nimport { ListButton } from \"../TasksListButtons\";\r\n\r\nexport const TaskRename = ({ task }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const inputFocus = useRef();\r\n\r\n  useEffect(() => {\r\n    if (inputFocus.current) {\r\n      inputFocus.current.focus();\r\n    }\r\n  });\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <TextRenameForm hide={!task.currentlyRename} onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        ref={(element) => {\r\n          inputFocus.current = element;\r\n        }}\r\n        type=\"text\"\r\n        placeholder=\"\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <ListButton\r\n        type=\"submit\"\r\n        title=\"Zatwierdź zmianę\"\r\n        onClick={() => {\r\n          if (newTaskContent === \"\") dispatch(cancelRenameTask(task.id));\r\n          else\r\n            dispatch(\r\n              acceptRenameTask({\r\n                content: newTaskContent,\r\n                done: false,\r\n                currentlyRename: false,\r\n                id: task.id,\r\n              })\r\n            );\r\n        }}\r\n      >\r\n        ✔\r\n      </ListButton>\r\n      <ListButton\r\n        remove\r\n        type=\"button\"\r\n        title=\"Anuluj zmianę\"\r\n        onClick={() => dispatch(cancelRenameTask(task.id))}\r\n      >\r\n        X\r\n      </ListButton>\r\n    </TextRenameForm>\r\n  );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  background-color: white;\r\n  list-style: none;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.span`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr repeat(2, auto);\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid rgb(218, 218, 218);\r\n\r\n  ${({ hide }) =>\r\n    hide &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const ListText = styled.span`\r\n  word-break: break-word;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: black;\r\n`;\r\n","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  return new URLSearchParams(location.search).get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  };\r\n};\r\n","export const searchQueryParameter = \"szukaj\";\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/author\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `${toTasks()}/${id}`;\r\n","import { TaskRename } from \"../TaskRename/Index\";\r\nimport { Item, List, ListText, StyledLink } from \"./styled\";\r\nimport {\r\n  toggleTaskDone,\r\n  removeTask,\r\n  renameTask,\r\n  selectHideDone,\r\n  selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useQueryParameter } from \"../../queryParameters\";\r\nimport { searchQueryParameter } from \"../../searchQueryParameter\";\r\nimport { toTask } from \"../../../../rutes\";\r\nimport { ListButton } from \"../TasksListButtons\";\r\n\r\nexport const TasksList = () => {\r\n  const query = useQueryParameter(searchQueryParameter);\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <li key={task.id}>\r\n          <Item hide={(task.done && hideDone) || task.currentlyRename}>\r\n            <ListButton onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n              {task.done ? \"✔\" : \"\"}\r\n            </ListButton>\r\n            <ListText done={task.done}>\r\n              <StyledLink to={toTask({ id: task.id })}>\r\n                {task.content}\r\n              </StyledLink>\r\n            </ListText>\r\n            <ListButton\r\n              currentlyRename\r\n              onClick={() => dispatch(renameTask(task.id))}\r\n              title=\"edytuj zadanie\"\r\n            >\r\n              🖊️\r\n            </ListButton>\r\n            <ListButton\r\n              remove\r\n              onClick={() => dispatch(removeTask(task.id))}\r\n              title=\"usuń zadanie\"\r\n            >\r\n              🗑\r\n            </ListButton>\r\n          </Item>\r\n          <TaskRename task={task} />\r\n        </li>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n","import {\r\n  useQueryParameter,\r\n  useReplaceQueryParameter,\r\n} from \"../../queryParameters\";\r\nimport { searchQueryParameter } from \"../../searchQueryParameter\";\r\nimport { Input } from \"../../../../common/Input\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport const Search = () => {\r\n  const query = useQueryParameter(searchQueryParameter);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParameter,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Loader = styled.p`\r\n  display: inline-block;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 1.4em;\r\n  font-weight: 600;\r\n  transform: scale(0.5);\r\n  color: #121212;\r\n\r\n  &:nth-child(1) {\r\n    animation: hover 1s linear infinite;\r\n  }\r\n\r\n  &:nth-child(2) {\r\n    animation: hover 1s linear infinite 0.125s;\r\n  }\r\n\r\n  &:nth-child(3) {\r\n    animation: hover 1s linear infinite 0.25s;\r\n  }\r\n\r\n  &:nth-child(4) {\r\n    animation: hover 1s linear infinite 0.375s;\r\n  }\r\n\r\n  &:nth-child(5) {\r\n    animation: hover 1s linear infinite 0.5s;\r\n  }\r\n\r\n  &:nth-child(6) {\r\n    animation: hover 1s linear infinite 0.675s;\r\n  }\r\n\r\n  &:nth-child(7) {\r\n    animation: hover 1s linear infinite 0.75s;\r\n  }\r\n\r\n  @keyframes hover {\r\n    0% {\r\n      transform: scale(0.5);\r\n      color: #121212;\r\n      -webkit-text-stroke: 2px gray;\r\n    }\r\n\r\n    20% {\r\n      transform: scale(1);\r\n      color: pink;\r\n      -webkit-text-stroke: 3px red;\r\n      filter: drop-shadow(0 0 1px black) drop-shadow(0 0 1px black)\r\n        drop-shadow(0 0 3px red) drop-shadow(0 0 5px red) hue-rotate(10turn);\r\n    }\r\n\r\n    50% {\r\n      transform: scale(0.5);\r\n      color: #121212;\r\n      -webkit-text-stroke: 2px gray;\r\n    }\r\n  }\r\n`;\r\n","import { Loader } from \"./styled\";\r\n\r\nexport const Loading = () => (\r\n  <>\r\n    <Loader>l</Loader>\r\n    <Loader>o</Loader>\r\n    <Loader>a</Loader>\r\n    <Loader>d</Loader>\r\n    <Loader>i</Loader>\r\n    <Loader>n</Loader>\r\n    <Loader>g</Loader>\r\n  </>\r\n);\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { AdditionalButtons, Button } from \"../../../../common/Button\";\r\nimport { axiosExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport { Loading } from \"../../../../common/Loading\";\r\n\r\nexport const ExampleButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n\r\n  return (\r\n    <AdditionalButtons>\r\n      <Button onClick={() => dispatch(axiosExampleTasks())}>\r\n        {loading ? <Loading /> : \"pokaż przykładowe zadania\"}\r\n      </Button>\r\n    </AdditionalButtons>\r\n  );\r\n};\r\n","import { Form } from \"./Form\";\nimport { Section } from \"../../../common/Section\";\nimport { Buttons } from \"./Buttons\";\nimport { Header } from \"../../../common/Header\";\nimport { Main } from \"../../../common/Main\";\nimport { TasksList } from \"./TasksList\";\nimport { Search } from \"./Search\";\nimport { ExampleButton } from \"./ExampleButton\";\n\nexport const TasksPage = () => {\n  return (\n    <>\n      <Header title=\"Lista zadań\" />\n      <Main>\n        <Section\n          title={\"Dodaj nowe zadanie\"}\n          extraHeaderContent={<ExampleButton />}\n          body={<Form />}\n        />\n        <Section title={\"Wyszukiwarka\"} body={<Search />} />\n        <Section\n          title={\"Lista zadań\"}\n          extraHeaderContent={<Buttons />}\n          body={<TasksList />}\n        />\n      </Main>\n    </>\n  );\n};\n","import { Header } from \"../../../common/Header\";\r\nimport { Main } from \"../../../common/Main\";\r\nimport { Section } from \"../../../common/Section\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTasksById } from \"../tasksSlice\";\r\nexport const TaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTasksById(state, id));\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Main>\r\n        <Section\r\n          title={task ? task.content : \"Nie znaleziono zadania😢\"}\r\n          body={\r\n            task && (\r\n              <>\r\n                <strong>Ukończono: </strong>\r\n                {task.done ? \"Tak\" : \"Nie\"}\r\n              </>\r\n            )\r\n          }\r\n        />\r\n      </Main>\r\n    </>\r\n  );\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledNavlink = styled(NavLink)`\r\n  text-decoration: none;\r\n  padding: 8px 16px;\r\n  color: hsl(0deg 0% 80%);\r\n  border: 2px solid hsl(0deg 0% 80%);\r\n  border-radius: 50px 10px;\r\n  cursor: pointer;\r\n  &.active {\r\n    color: white;\r\n    font-weight: bold;\r\n    border: 2px solid white;\r\n  }\r\n  &:hover {\r\n    box-shadow: 0 0 5px white, inset 0 0 5px white;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  justify-content: center;\r\n  width: 100%;\r\n  grid-gap: 15px;\r\n  background-color: ${({ theme }) => theme.colors.mainColor};\r\n  padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  list-style: none;\r\n  padding: 10px;\r\n`;\r\n","import { toAuthor, toTasks } from \"../rutes\";\r\nimport { Item, List, StyledNavlink } from \"./styled\";\r\n\r\nexport const Navigation = () => (\r\n  <nav>\r\n    <List>\r\n      <Item>\r\n        <StyledNavlink to={toTasks()}>Zadania</StyledNavlink>\r\n      </Item>\r\n      <Item>\r\n        <StyledNavlink to={toAuthor()}>O autorze</StyledNavlink>\r\n      </Item>\r\n    </List>\r\n  </nav>\r\n);\r\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { AuthorPage } from \"./features/author/AuthorPage\";\r\nimport { TasksPage } from \"./features/tasks/TasksPage\";\r\nimport { TaskPage } from \"./features/tasks/TaskPage\";\r\nimport { Navigation } from \"./Navigation/\";\r\nimport { toAuthor, toTask, toTasks } from \"./rutes\";\r\n\r\nconst App = () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n    <Switch>\r\n      <Route path={toTask()}>\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path={toTasks()}>\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path={toAuthor()}>\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Redirect to={toTasks()} />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  colors: {\r\n    mainColor: \"teal\",\r\n    backgroundColor: \"#eee\",\r\n    renameButton: \"hsl(200, 95%, 40%)\",\r\n    cancelButton: \"hsl(357, 95%, 40%)\",\r\n    completeTaskButton: \"hsl(120, 100%, 25%)\",\r\n  },\r\n  size: {\r\n    mobile: \"767px\",\r\n  },\r\n  filter: {\r\n    hover: \"brightness(110%)\",\r\n    active: \"brightness(125%)\",\r\n  },\r\n};\r\n"],"sourceRoot":""}